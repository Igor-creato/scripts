#!/usr/bin/env bash
set -euo pipefail

#
# install.sh ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–∞:
# Traefik (Let's Encrypt) + —Å–∞–π—Ç (nginx) + n8n + Supabase (self-hosted)
#

# ---------- –ü–ê–†–ê–ú–ï–¢–†–´ ----------
DOMAIN_BASE="autmatization-bot.ru"
SITE_DOMAIN="$DOMAIN_BASE"
N8N_DOMAIN="n8n.$DOMAIN_BASE"
SUPABASE_DOMAIN="supabase.$DOMAIN_BASE"
STUDIO_DOMAIN="studio.supabase.$DOMAIN_BASE"
TRAEFIK_DOMAIN="traefik.$DOMAIN_BASE"
SERVER_IP=$(curl -s ifconfig.me)
LETSENCRYPT_EMAIL="ppcdolar@gmail.com"

PROJECT_DIR="$HOME/project"
TRAEFIK_DIR="$PROJECT_DIR/traefik"
LE_DIR="$PROJECT_DIR/letsencrypt"
N8N_DIR="$PROJECT_DIR/n8n"
SITE_DIR="$PROJECT_DIR/site"

# ---------- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê ----------
MODE="staging" # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã

if [[ "${1:-}" == "--update" ]]; then
    MODE="update"
elif [[ "${1:-}" == "--prod" ]]; then
    MODE="prod"
fi

# ---------- –†–ï–ñ–ò–ú –û–ë–ù–û–í–õ–ï–ù–ò–Ø ----------
if [[ "$MODE" == "update" ]]; then
    echo "üîÑ –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
    if [ ! -f "$PROJECT_DIR/docker-compose.yml" ]; then
        echo "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
        exit 1
    fi

    echo "üì¶ –û–±–Ω–æ–≤–ª—è—é –≤–µ—Å—å —Å—Ç–µ–∫..."
    cd "$PROJECT_DIR"
    docker compose pull
    docker compose up -d --build
    echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
    exit 0
fi

# ---------- –ü–û–õ–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê ----------
echo "–ü—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: $PROJECT_DIR"
mkdir -p "$PROJECT_DIR" "$TRAEFIK_DIR" "$LE_DIR" "$N8N_DIR/data" "$SITE_DIR"

# ---------- –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ ----------
echo "üì¶ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É..."
sudo apt update && sudo apt upgrade -y

# ---------- –ü–†–û–í–ï–†–ö–ê DNS ----------
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS –∑–∞–ø–∏—Å–∏..."
for DOMAIN in $DOMAIN_BASE $N8N_DOMAIN $SUPABASE_DOMAIN $STUDIO_DOMAIN $TRAEFIK_DOMAIN; do
  DNS_IP=$(dig +short $DOMAIN | tail -n1)
  if [ "$DNS_IP" != "$SERVER_IP" ]; then
    echo "‚ùå $DOMAIN —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ $DNS_IP, –∞ –Ω–µ –Ω–∞ $SERVER_IP"
    exit 1
  else
    echo "‚úÖ $DOMAIN —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ $SERVER_IP"
  fi
done

# ---------- –£–°–¢–ê–ù–û–í–ö–ê DOCKER ----------
if ! command -v docker >/dev/null 2>&1; then
  echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker..."
  sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
    | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
  sudo apt update
  sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
  sudo usermod -aG docker "$USER" || true
else
  echo "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
fi

# ---------- .ENV –î–õ–Ø –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê ----------
ENV_FILE="$PROJECT_DIR/.env"
if [ ! -f "$ENV_FILE" ]; then
  echo "–ì–µ–Ω–µ—Ä–∏—Ä—É—é .env –¥–ª—è –≤—Å–µ–≥–æ —Å—Ç–µ–∫–∞..."
  gen_secret() { openssl rand -base64 32 | tr -d '/+=' | head -c 32; }
  gen_hex() { openssl rand -hex 32; }

  cat > "$ENV_FILE" <<EOF
# Supabase
POSTGRES_PASSWORD=$(gen_hex)
POSTGRES_USER=postgres
POSTGRES_DB=postgres
JWT_SECRET=$(gen_secret)
ANON_KEY=$(gen_secret)
SERVICE_ROLE_KEY=$(gen_secret)
SUPABASE_PUBLIC_URL=https://$SUPABASE_DOMAIN
API_EXTERNAL_URL=https://$SUPABASE_DOMAIN
STUDIO_PORT=3000

# n8n
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=$(gen_secret)
GENERIC_TIMEZONE=Europe/Amsterdam
N8N_HOST=$N8N_DOMAIN
N8N_PROTOCOL=https
EOF
  chmod 600 "$ENV_FILE"
else
  echo ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
fi

# ---------- –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–ê TRAEFIK ----------
echo "–°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Traefik..."
CASERVER_LINE=""
if [[ "$MODE" == "staging" ]]; then
  CASERVER_LINE="      caServer: https://acme-staging-v02.api.letsencrypt.org/directory"
  echo "‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π CA —Å–µ—Ä–≤–µ—Ä Let's Encrypt (staging)"
elif [[ "$MODE" == "prod" ]]; then
  echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–µ–≤–æ–π Let's Encrypt (production)"
fi

cat > "$TRAEFIK_DIR/traefik.yml" <<EOF
api:
  dashboard: true
entryPoints:
  web:
    address: ":80"
    http:
      redirections:
        entryPoint:
          to: websecure
          scheme: https
  websecure:
    address: ":443"
providers:
  docker:
    exposedByDefault: false
    network: traefik-net
certificatesResolvers:
  letsencrypt:
    acme:
      email: $LETSENCRYPT_EMAIL
      storage: /letsencrypt/acme.json
$CASERVER_LINE
      httpChallenge:
        entryPoint: web
EOF

# ---------- –°–û–•–†–ê–ù–ï–ù–ò–ï ACME.JSON ----------
if [ ! -f "$LE_DIR/acme.json" ]; then
  echo "–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π acme.json..."
  touch "$LE_DIR/acme.json"
  chmod 600 "$LE_DIR/acme.json"
else
  echo "–ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π acme.json"
fi

# ---------- –ü–†–û–°–¢–û–ô –°–ê–ô–¢ ----------
cat > "$SITE_DIR/Dockerfile" <<EOF
FROM nginx:stable-alpine
COPY index.html /usr/share/nginx/html/index.html
EOF

cat > "$SITE_DIR/index.html" <<EOF
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>Automation Bot</title></head>
  <body>
    <h1>Automation Bot ‚Äî —Å–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç</h1>
    <ul>
      <li><a href="https://$STUDIO_DOMAIN">Supabase Studio</a></li>
      <li><a href="https://$N8N_DOMAIN">n8n</a></li>
      <li><a href="https://$TRAEFIK_DOMAIN">Traefik Dashboard</a></li>
    </ul>
  </body>
</html>
EOF

# ---------- –ï–î–ò–ù–´–ô DOCKER-COMPOSE.YML ----------
echo "–°–æ–∑–¥–∞—é –µ–¥–∏–Ω—ã–π docker-compose.yml –¥–ª—è –≤—Å–µ–≥–æ —Å—Ç–µ–∫–∞..."
cat > "$PROJECT_DIR/docker-compose.yml" <<EOF
version: "3.9"

networks:
  traefik-net:
    name: traefik-net

volumes:
  db_data:
  storage_data:
  n8n_data:

services:
  # Traefik
  traefik:
    image: traefik:v3.1
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.network=traefik-net"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./letsencrypt/acme.json:/letsencrypt/acme.json"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(\`${TRAEFIK_DOMAIN}\`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
    networks:
      - traefik-net
    restart: unless-stopped

  # Site
  site:
    build: ./site
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.site.rule=Host(\`${SITE_DOMAIN}\`)"
      - "traefik.http.routers.site.entrypoints=websecure"
      - "traefik.http.routers.site.tls.certresolver=letsencrypt"
      - "traefik.http.services.site.loadbalancer.server.port=80"
    networks:
      - traefik-net
    restart: unless-stopped

  # n8n
  n8n:
    image: n8nio/n8n:latest
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=\${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=\${N8N_BASIC_AUTH_PASSWORD}
      - GENERIC_TIMEZONE=\${GENERIC_TIMEZONE}
      - N8N_HOST=\${N8N_HOST}
      - N8N_PROTOCOL=\${N8N_PROTOCOL}
    volumes:
      - "n8n_data:/home/node/.n8n"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(\`${N8N_DOMAIN}\`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      - traefik-net
    restart: unless-stopped

  # Supabase DB
  db:
    image: supabase/postgres:15.1.0.117
    environment:
      - POSTGRES_USER=\${POSTGRES_USER}
      - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
      - POSTGRES_DB=\${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - traefik-net
    restart: unless-stopped

  # Supabase API Gateway
  kong:
    image: supabase/kong:2.8.1-20220817
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/var/lib/kong/kong.yml
      - KONG_DNS_ORDER=LAST,A,CNAME
      - KONG_PLUGINS=request-transformer,cors,key-auth,acl
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.supabase-api.rule=Host(\`${SUPABASE_DOMAIN}\`)"
      - "traefik.http.routers.supabase-api.entrypoints=websecure"
      - "traefik.http.routers.supabase-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.supabase-api.loadbalancer.server.port=8000"
    networks:
      - traefik-net
    restart: unless-stopped

  # Supabase Services
  auth:
    image: supabase/gotrue:v2.128.1
    environment:
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - GOTRUE_JWT_SECRET=\${JWT_SECRET}
      - GOTRUE_JWT_EXP=3600
      - GOTRUE_SITE_URL=\${SUPABASE_PUBLIC_URL}
      - GOTRUE_URI_SCHEMES=https
      - GOTRUE_DATABASE_URL=postgres://\${POSTGRES_USER}:\${POSTGRES_PASSWORD}@db:5432/\${POSTGRES_DB}
    networks:
      - traefik-net
    restart: unless-stopped

  rest:
    image: postgrest/postgrest:v11.2.2
    environment:
      - PGRST_DB_URI=postgres://\${POSTGRES_USER}:\${POSTGRES_PASSWORD}@db:5432/\${POSTGRES_DB}
      - PGRST_DB_SCHEMAS=public,storage,graphql_public
      - PGRST_DB_ANON_ROLE=anon
      - PGRST_JWT_SECRET=\${JWT_SECRET}
    networks:
      - traefik-net
    restart: unless-stopped

  realtime:
    image: supabase/realtime:v2.26.1
    environment:
      - REALTIME_POSTGRES_HOST=db
      - REALTIME_POSTGRES_PORT=5432
      - REALTIME_POSTGRES_USER=\${POSTGRES_USER}
      - REALTIME_POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
      - REALTIME_POSTGRES_DBNAME=\${POSTGRES_DB}
      - REALTIME_PORT=4000
      - REALTIME_JWT_SECRET=\${JWT_SECRET}
    networks:
      - traefik-net
    restart: unless-stopped

  storage-api:
    image: supabase/storage-api:v0.47.0
    environment:
      - STORAGE_DATABASE_URL=postgres://\${POSTGRES_USER}:\${POSTGRES_PASSWORD}@db:5432/\${POSTGRES_DB}
      - STORAGE_BACKEND=file
      - FILE_STORAGE_BACKEND_PATH=/var/lib/storage
      - TENANT_ID=stub
      - ANON_KEY=\${ANON_KEY}
      - SERVICE_ROLE_KEY=\${SERVICE_ROLE_KEY}
      - JWT_SECRET=\${JWT_SECRET}
    volumes:
      - storage_data:/var/lib/storage
    networks:
      - traefik-net
    restart: unless-stopped

  # Supabase Studio
  studio:
    image: supabase/studio:20240711-0604
    environment:
      - SUPABASE_PUBLIC_URL=https://\${SUPABASE_DOMAIN}
      - SUPABASE_API_URL=https://\${API_EXTERNAL_URL}
      - SUPABASE_DB_HOST=db
      - SUPABASE_DB_USER=\${POSTGRES_USER}
      - SUPABASE_DB_PASSWORD=\${POSTGRES_PASSWORD}
      - SUPABASE_DB_PORT=5432
      - ANON_KEY=\${ANON_KEY}
      - SERVICE_ROLE_KEY=\${SERVICE_ROLE_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.supabase-studio.rule=Host(\`${STUDIO_DOMAIN}\`)"
      - "traefik.http.routers.supabase-studio.entrypoints=websecure"
      - "traefik.http.routers.supabase-studio.tls.certresolver=letsencrypt"
      - "traefik.http.services.supabase-studio.loadbalancer.server.port=${STUDIO_PORT}"
    networks:
      - traefik-net
    restart: unless-stopped
EOF

# ---------- –ó–ê–ü–£–°–ö –í–°–ï–ì–û –°–¢–ï–ö–ê ----------
cd "$PROJECT_DIR"
echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤–µ—Å—å —Å—Ç–µ–∫ –æ–¥–Ω–∏–º docker-compose..."
docker compose pull
docker compose up -d --build

echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "---"
echo "–î–æ—Å—Ç—É–ø—ã:"
echo "üåê –°–∞–π—Ç: https://$SITE_DOMAIN"
echo "üîß n8n: https://$N8N_DOMAIN (–õ–æ–≥–∏–Ω: admin, –ü–∞—Ä–æ–ª—å –≤ —Ñ–∞–π–ª–µ .env)"
echo "üöÄ Supabase API: https://$SUPABASE_DOMAIN"
echo "üé® Supabase Studio: https://$STUDIO_DOMAIN"
echo "üö¶ Traefik Dashboard: https://$TRAEFIK_DOMAIN"