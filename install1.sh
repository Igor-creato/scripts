#!/usr/bin/env bash
set -euo pipefail

#
# install.sh ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–∞:
# Traefik (Let's Encrypt) + —Å–∞–π—Ç (nginx) + n8n + Supabase (self-hosted)
#
# –†–µ–∂–∏–º—ã:
#   1) bash install.sh          -> STAGING (—Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤)
#   2) bash install.sh --prod   -> PROD (–±–æ–µ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã)
#   3) bash install.sh --update -> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤/—Å–µ—Ä—Ç–æ–≤
#

# ---------- –ü–ê–†–ê–ú–ï–¢–†–´ ----------
DOMAIN_BASE="autmatization-bot.ru"
SITE_DOMAIN="$DOMAIN_BASE"
N8N_DOMAIN="n8n.$DOMAIN_BASE"
SUPABASE_DOMAIN="supabase.$DOMAIN_BASE"
STUDIO_DOMAIN="studio.supabase.$DOMAIN_BASE"
TRAEFIK_DOMAIN="traefik.$DOMAIN_BASE"
SERVER_IP=$(curl -s ifconfig.me || echo "")
LETSENCRYPT_EMAIL="ppcdolar@gmail.com"

PROJECT_DIR="$HOME/project"
SUPABASE_DIR="$PROJECT_DIR/supabase"
SUPABASE_DOCKER_DIR="$SUPABASE_DIR/docker"
TRAEFIK_DIR="$PROJECT_DIR/traefik"
LE_DIR="$PROJECT_DIR/letsencrypt"

# ---------- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê ----------
MODE="staging" # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
if [[ "${1:-}" == "--update" ]]; then
  MODE="update"
elif [[ "${1:-}" == "--prod" ]]; then
  MODE="prod"
fi

# ---------- –•–ï–õ–ü–ï–†–´ ----------
msg() { echo -e "$*"; }

wait_https_ready() {
  local domain="$1"
  local tries="${2:-60}"   # –¥–æ 60 –ø–æ–ø—ã—Ç–æ–∫
  local sleep_s="${3:-5}"  # –ø–æ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

  msg "‚è≥ –ñ–¥—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ https://${domain} ..."
  for ((i=1; i<=tries; i++)); do
    # –ù–µ –≤–∞–ª–∏–º –Ω–∞ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º/—Å—Ç–µ–π–¥–∂–∏–Ω–≥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ (-k)
    if curl -k -sS -o /dev/null -w "%{http_code}" "https://${domain}" | grep -Eq '^(200|301|302|401|403)$'; then
      msg "‚úÖ HTTP(S) –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ https://${domain}"
      return 0
    fi
    sleep "$sleep_s"
  done
  msg "‚ùå –ù–µ –¥–æ–∂–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç https://${domain}"
  return 1
}

check_cert_issuer() {
  local domain="$1"
  local expect_staging="$2" # "yes"|"no"
  local issuer
  issuer=$(openssl s_client -connect "${domain}:443" -servername "${domain}" -showcerts </dev/null 2>/dev/null | openssl x509 -noout -issuer 2>/dev/null || true)

  if [[ -z "$issuer" ]]; then
    msg "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è ${domain}"
    return 1
  fi

  msg "üîé Issuer –¥–ª—è ${domain}: ${issuer}"

  if [[ "$expect_staging" == "yes" ]]; then
    # –£ staging Let's Encrypt –æ–±—ã—á–Ω–æ CN —Å–æ–¥–µ—Ä–∂–∏—Ç "Fake LE Intermediate"
    if echo "$issuer" | grep -qi "Fake LE"; then
      msg "‚úÖ –ù–∞–π–¥–µ–Ω STAGING —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (issuer —Å–æ–¥–µ—Ä–∂–∏—Ç 'Fake LE')."
      return 0
    else
      msg "‚ùå –û–∂–∏–¥–∞–ª—Å—è STAGING —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –Ω–æ issuer –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ 'Fake LE'."
      return 1
    fi
  else
    # –î–ª—è –ø—Ä–æ–¥ ‚Äî –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ —ç—Ç–æ Let's Encrypt, –Ω–æ –Ω–µ 'Fake LE'
    if echo "$issuer" | grep -qi "Let's Encrypt" && ! echo "$issuer" | grep -qi "Fake LE"; then
      msg "‚úÖ –ù–∞–π–¥–µ–Ω PROD —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç Let's Encrypt."
      return 0
    else
      msg "‚ùå –û–∂–∏–¥–∞–ª—Å—è PROD —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç Let's Encrypt (–Ω–µ 'Fake LE')."
      return 1
    fi
  fi
}

# ---------- –†–ï–ñ–ò–ú –û–ë–ù–û–í–õ–ï–ù–ò–Ø ----------
if [[ "$MODE" == "update" ]]; then
  msg "üîÑ –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."

  if ! docker network ls --format '{{.Name}}' | grep -q "^traefik-net$"; then
    msg "‚ùå –°–µ—Ç—å traefik-net –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É."
    exit 1
  fi
  if [ ! -d "$PROJECT_DIR" ] || [ ! -d "$SUPABASE_DOCKER_DIR" ]; then
    msg "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É."
    exit 1
  fi

  msg "üì¶ –û–±–Ω–æ–≤–ª—è—é Traefik, —Å–∞–π—Ç –∏ n8n..."
  cd "$PROJECT_DIR"
  docker compose pull
  docker compose up -d --build

  msg "üì¶ –û–±–Ω–æ–≤–ª—è—é Supabase..."
  cd "$SUPABASE_DOCKER_DIR"
  docker compose pull
  docker compose up -d

  msg "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
  exit 0
fi

# ---------- –ü–û–õ–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê ----------
msg "–ü—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: $PROJECT_DIR"
mkdir -p "$PROJECT_DIR" "$SUPABASE_DOCKER_DIR" "$TRAEFIK_DIR" "$LE_DIR"

# ---------- –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ ----------
msg "üì¶ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É..."
sudo apt update && sudo apt upgrade -y

# ---------- –ü–†–û–í–ï–†–ö–ê DNS ----------
if [[ -n "$SERVER_IP" ]]; then
  msg "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS –∑–∞–ø–∏—Å–∏..."
  for DOMAIN in $DOMAIN_BASE $N8N_DOMAIN $SUPABASE_DOMAIN $STUDIO_DOMAIN $TRAEFIK_DOMAIN; do
    DNS_IP=$(dig +short "$DOMAIN" | tail -n1)
    if [ "$DNS_IP" != "$SERVER_IP" ]; then
      msg "‚ùå $DOMAIN —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ $DNS_IP, –∞ –Ω–µ –Ω–∞ $SERVER_IP"
      exit 1
    else
      msg "‚úÖ $DOMAIN —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ $SERVER_IP"
    fi
  done
else
  msg "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É DNS."
fi

# ---------- –£–°–¢–ê–ù–û–í–ö–ê DOCKER ----------
if ! command -v docker >/dev/null 2>&1; then
  msg "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker..."
  sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
    | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
  sudo apt update
  sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
  sudo usermod -aG docker "$USER" || true
else
  msg "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
fi

# ---------- –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï SUPABASE ----------
if [ ! -d "$SUPABASE_DIR" ]; then
  msg "–ö–ª–æ–Ω–∏—Ä—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Supabase —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
  git clone https://github.com/supabase/supabase.git "$SUPABASE_DIR"
else
  msg "Supabase —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
fi

# ---------- TRAEFIK: —Ä–µ–∂–∏–º—ã —Å–µ—Ä—Ç–æ–≤ ----------
ACME_FILE="acme.json"
CASERVER_LINE=""
EXPECT_STAGING="no"
if [[ "$MODE" == "staging" ]]; then
  ACME_FILE="acme-staging.json"
  CASERVER_LINE="      caServer: https://acme-staging-v02.api.letsencrypt.org/directory"
  EXPECT_STAGING="yes"
  msg "‚ö†Ô∏è  –†–µ–∂–∏–º STAGING: —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (–±–µ–∑ –ª–∏–º–∏—Ç–æ–≤)."
else
  msg "‚úÖ –†–µ–∂–∏–º PROD: –±–æ–µ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã Let's Encrypt."
fi
STORAGE_PATH="/letsencrypt/${ACME_FILE}"

# ---------- –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–ê TRAEFIK ----------
msg "–°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Traefik..."
cat > "$TRAEFIK_DIR/traefik.yml" <<EOF
api:
  dashboard: true
entryPoints:
  web:
    address: ":80"
  websecure:
    address: ":443"
providers:
  docker:
    exposedByDefault: false
certificatesResolvers:
  letsencrypt:
    acme:
      email: $LETSENCRYPT_EMAIL
      storage: $STORAGE_PATH
$CASERVER_LINE
      httpChallenge:
        entryPoint: web
EOF

# ---------- –°–û–•–†–ê–ù–ï–ù–ò–ï ACME-–§–ê–ô–õ–ê ----------
if [ ! -f "$LE_DIR/$ACME_FILE" ]; then
  msg "–°–æ–∑–¥–∞—é $LE_DIR/$ACME_FILE ..."
  touch "$LE_DIR/$ACME_FILE"
  chmod 600 "$LE_DIR/$ACME_FILE"
else
  msg "–ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π $LE_DIR/$ACME_FILE (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã)."
fi

# ---------- –°–û–ó–î–ê–ù–ò–ï –°–ï–¢–ò TRAEFIK-NET ----------
if ! docker network ls --format '{{.Name}}' | grep -q "^traefik-net$"; then
  msg "–°–æ–∑–¥–∞—é —Å–µ—Ç—å traefik-net..."
  docker network create traefik-net
else
  msg "–°–µ—Ç—å traefik-net —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
fi

# ---------- DOCKER-COMPOSE (Traefik + Site + n8n + Dashboard) ----------
msg "–°–æ–∑–¥–∞—é docker-compose.yml..."
cat > "$PROJECT_DIR/docker-compose.yml" <<EOF
version: "3.9"
networks:
  traefik-net:
    external: true
services:
  traefik:
    image: traefik:v3.1
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--log.level=INFO"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--api.dashboard=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./letsencrypt/${ACME_FILE}:${STORAGE_PATH}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(\`$TRAEFIK_DOMAIN\`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
    networks:
      - traefik-net
    restart: unless-stopped

  site:
    build: ./site
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.site.rule=Host(\`$SITE_DOMAIN\`)"
      - "traefik.http.routers.site.entrypoints=websecure"
      - "traefik.http.routers.site.tls.certresolver=letsencrypt"
      - "traefik.http.services.site.loadbalancer.server.port=80"
    networks:
      - traefik-net
    restart: unless-stopped

  n8n:
    image: n8nio/n8n:latest
    depends_on:
      - traefik
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=$(openssl rand -base64 16 | tr -d '\n')
      - GENERIC_TIMEZONE=Europe/Amsterdam
      - N8N_HOST=$N8N_DOMAIN
      - N8N_PROTOCOL=https
    volumes:
      - ./n8n/data:/home/node/.n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(\`$N8N_DOMAIN\`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      - traefik-net
    restart: unless-stopped
EOF

# ---------- –ü–†–û–°–¢–û–ô –°–ê–ô–¢ ----------
mkdir -p "$PROJECT_DIR/site"
cat > "$PROJECT_DIR/site/Dockerfile" <<'EOF'
FROM nginx:stable-alpine
COPY index.html /usr/share/nginx/html/index.html
EOF

cat > "$PROJECT_DIR/site/index.html" <<EOF
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>Automation Bot</title></head>
  <body>
    <h1>Automation Bot ‚Äî —Å–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç</h1>
    <ul>
      <li><a href="https://$SUPABASE_DOMAIN">Supabase</a></li>
      <li><a href="https://$N8N_DOMAIN">n8n</a></li>
      <li><a href="https://$TRAEFIK_DOMAIN">Traefik Dashboard</a></li>
    </ul>
  </body>
</html>
EOF

# ---------- .ENV –î–õ–Ø SUPABASE ----------
SUP_ENV_FILE="$SUPABASE_DOCKER_DIR/.env"
mkdir -p "$SUPABASE_DOCKER_DIR"

gen_secret() { openssl rand -base64 48 | tr -d '\n'; }
gen_hex() { openssl rand -hex 32; }

if [ ! -f "$SUP_ENV_FILE" ]; then
  msg "–ì–µ–Ω–µ—Ä–∏—Ä—É—é .env –¥–ª—è Supabase..."
  cat > "$SUP_ENV_FILE" <<EOF
POSTGRES_PASSWORD=$(gen_hex)
POSTGRES_USER=postgres
POSTGRES_DB=postgres
POSTGRES_HOST=db
POSTGRES_PORT=5432
JWT_SECRET=$(gen_secret)
JWT_EXPIRY=3600
ANON_KEY=$(gen_secret)
SERVICE_ROLE_KEY=$(gen_secret)
VAULT_ENC_KEY=$(gen_secret)
LOGFLARE_PUBLIC_ACCESS_TOKEN=$(gen_secret)
LOGFLARE_PRIVATE_ACCESS_TOKEN=$(gen_secret)
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD=$(gen_secret)
SECRET_KEY_BASE=$(gen_secret)
SMTP_HOST=smtp.$DOMAIN_BASE
SMTP_PORT=587
SMTP_USER=no-reply@$DOMAIN_BASE
SMTP_PASS=$(gen_secret)
SMTP_ADMIN_EMAIL=admin@$DOMAIN_BASE
SMTP_SENDER_NAME=Supabase
SUPABASE_PUBLIC_URL=https://$SUPABASE_DOMAIN
API_EXTERNAL_URL=https://$SUPABASE_DOMAIN
ADDITIONAL_REDIRECT_URLS=https://$N8N_DOMAIN
MAILER_URLPATHS_CONFIRMATION=/auth/confirm
MAILER_URLPATHS_RECOVERY=/auth/recover
MAILER_URLPATHS_INVITE=/auth/invite
MAILER_URLPATHS_EMAIL_CHANGE=/auth/change
ENABLE_EMAIL_SIGNUP=true
ENABLE_ANONYMOUS_USERS=false
ENABLE_PHONE_SIGNUP=false
ENABLE_PHONE_AUTOCONFIRM=false
ENABLE_EMAIL_AUTOCON–§IRM=false
DISABLE_SIGNUP=false
PGRST_DB_SCHEMAS=public
FUNCTIONS_VERIFY_JWT=true
DOCKER_SOCKET_LOCATION=/var/run/docker.sock
IMGPROXY_ENABLE_WEBP_DETECTION=true
POOLER_PROXY_PORT_TRANSACTION=6543
POOLER_TENANT_ID=default
POOLER_DEFAULT_POOL_SIZE=20
POOLER_MAX_CLIENT_CONN=100
POOLER_DB_POOL_SIZE=20
EOF
  chmod 600 "$SUP_ENV_FILE"
else
  msg ".env –¥–ª—è Supabase —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
fi

# ---------- OVERRIDE –î–õ–Ø SUPABASE ----------
cat > "$SUPABASE_DOCKER_DIR/docker-compose.override.yml" <<EOF
version: "3.9"
networks:
  traefik-net:
    external: true
services:
  kong:
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.supabase.rule=Host(\`$SUPABASE_DOMAIN\`)"
      - "traefik.http.routers.supabase.entrypoints=websecure"
      - "traefik.http.routers.supabase.tls.certresolver=letsencrypt"
      - "traefik.http.services.supabase.loadbalancer.server.port=8000"
  studio:
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.supabase-studio.rule=Host(\`$STUDIO_DOMAIN\`)"
      - "traefik.http.routers.supabase-studio.entrypoints=websecure"
      - "traefik.http.routers.supabase-studio.tls.certresolver=letsencrypt"
      - "traefik.http.services.supabase-studio.loadbalancer.server.port=3000"
EOF

# ---------- –ó–ê–ü–£–°–ö TRAEFIK + SITE + N8N ----------
cd "$PROJECT_DIR"
docker compose pull
docker compose up -d --build

# ---------- –ó–ê–ü–£–°–ö SUPABASE ----------
cd "$SUPABASE_DOCKER_DIR"
docker compose pull
docker compose up -d

# ---------- –ê–í–¢–û–ü–†–û–í–ï–†–ö–ê HTTPS –ò –ò–ó–î–ê–¢–ï–õ–Ø –°–ï–†–¢–ê ----------
set +e
overall_ok=0

for d in "$SITE_DOMAIN" "$N8N_DOMAIN" "$TRAEFIK_DOMAIN"; do
  if wait_https_ready "$d" 60 5; then
    if check_cert_issuer "$d" "$EXPECT_STAGING"; then
      msg "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ ${d} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ."
    else
      msg "‚ö†Ô∏è  ${d}: HTTPS –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∏–∑–¥–∞—Ç–µ–ª—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–ª —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∂–∏–º–æ–º."
      overall_ok=1
    fi
  else
    msg "‚ùå ${d}: –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ HTTPS."
    overall_ok=1
  fi
done
set -e

echo
if [[ "$MODE" == "staging" ]]; then
  echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  echo "üß™ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –í –†–ï–ñ–ò–ú–ï STAGING"
  echo "–§–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: $LE_DIR/acme-staging.json"
  echo "–ö–æ–≥–¥–∞ –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏—à—å ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Å—è –Ω–∞ –±–æ–µ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π:"
  echo
  echo "  bash \"$0\" --prod"
  echo
  echo "–≠—Ç–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç traefik.yml –Ω–∞ –ø—Ä–æ–¥–æ–≤—ã–π CA,"
  echo "—Å–º–æ–Ω—Ç–∏—Ä—É–µ—Ç $LE_DIR/acme.json –≤–Ω—É—Ç—Ä—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞,"
  echo "–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç —Å–µ—Ä–≤–∏—Å—ã –±–µ–∑ –ø—Ä–æ—Å—Ç–æ—è."
  echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
else
  echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  echo "‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –í –†–ï–ñ–ò–ú–ï PROD"
  echo "–§–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: $LE_DIR/acme.json"
  echo "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –≤ –±—É–¥—É—â–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
  echo
  echo "  bash \"$0\" --update"
  echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
fi

exit $overall_ok
